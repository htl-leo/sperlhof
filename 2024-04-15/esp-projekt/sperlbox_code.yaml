esphome:
  name: sperlbox

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "01T6rbg6kRjpusDhj2opiK2Rr9jksMd7ikNJ7IwsSeE="

ota:
  password: "fb03e5760aa71932dc8e6cda63ed884d"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "rgbled Fallback Hotspot"
    password: "CcQpyx5dWMJy"

captive_portal:

web_server:
  port: 80

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password

light:
  - platform: rgb
    name: "RGB Lights"
    id: rgblights
    red: r
    green: g
    blue: b

output:
  - platform: ledc
    pin: GPIO17
    id: g
  - platform: ledc
    pin: GPIO18
    id: r
  - platform: ledc
    pin: GPIO19
    id: b


# !lambda 'return  (float)(1.0 - (float)id(threshold_bright).state/100.0);'    

sensor:
  - platform: adc
    pin: GPIO35
    id: brightness
    name: "Brightness"
    unit_of_measurement: "%"
    device_class: illuminance
    accuracy_decimals: 0
    update_interval: 2s
    filters:
      - lambda: return ((1.3 - x) * 100.0);
    on_value:
      then:
        - logger.log:
            format: "Brightness reports value %.1f"
            args: [ 'id(brightness).state' ]        
        - if:
            condition:
              lambda: 'return id(brightness).state < id(threshold_dark).state;'
              # sensor.in_range:
                # id: brightness
                # below: 40
            then:
              - light.turn_on:
                  id: rgblights
                  brightness: 100%
                  red: 100%
                  green: 0%
                  blue: 0%    
        - if:
            condition:
              lambda: 'return id(brightness).state > id(threshold_dark).state && id(brightness).state < id(threshold_bright).state;'
              # sensor.in_range:
              #   id: brightness
              #   above: 40
              #   below: 80
            then:
              - light.turn_on:
                  id: rgblights
                  brightness: 70%
                  red: 0%
                  green: 0%
                  blue: 100%    
        - if:
            condition:
              lambda: 'return id(brightness).state > id(threshold_bright).state;'
              # sensor.in_range:
              #   id: brightness
              #   above: 80
            then:
              - light.turn_on:
                  id: rgblights
                  brightness: 50%
                  red: 0%
                  green: 100%
                  blue: 0%    

  - platform: homeassistant
    id: threshold_bright     
    entity_id: input_number.bright  
    on_value:
      then:
        - logger.log:
            format: "Threshold reports value %.1f"
            args: [ 'id(threshold_bright).state' ]        

  - platform: homeassistant
    id: threshold_dark     
    entity_id: input_number.dark  
    on_value:
      then:
        - logger.log:
            format: "Threshold reports value %.1f"
            args: [ 'id(threshold_dark).state' ]        
